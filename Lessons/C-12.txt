	Коллеги, здравствуйте. Рад вас приветствовать на 12м уроке Основы Языка С. На этом
занятии мы поговорим о структурах данных в языке С.
	Несмотря на то что язык Си создавался в незапамятные времена, уже тогда программисты
понимали, что примитивных типов данных недостаточно для комфортного программирования.
	Мир вокруг можно моделировать различными способами. Самым естественным из них является
представление о нём, как о наборе объектов. У каждого объекта есть свои свойства.
Например, для человека это возраст, пол, рост, вес и т.д. Для велосипеда – тип, размер
колёс, вес, материал, изготовитель и пр. Для товара в магазине – идентификационный номер,
название, группа, вес, цена, скидка и т.д. У классов объектов набор этих свойств
одинаковый: все собаки могут быть описаны, с той или иной точностью, одинаковым набором
свойств, но значения этих свойств будут разные. Все самолёты обладают набором общих
свойств в пределах одного класса. Если же нам надо более точное описание, то можно
выделить подклассы: самолёт амфибии, боевые истребители, пассажирские лайнеры – и в
пределах уже этих классов описывать объекты. Сразу небольшое отступление, для тех кто
изучал высокоуровневые языки, такие как Java или С#, в Си отсутствуют классы в том виде в
котором вы привыкли их видеть. Так вот, для работы с такими объектом нам необходима
конструкция, которая бы могла агрегировать различные типы данных под одним именем - так
появились структуры. Т.е. структура данных - это такая сущность, которая объединяет в себе
несколько примитивов. Для примера, создадим такую структуру, как простая дробь. В
программировании существуют дробные числа и представлены они типами float и double. Но это
десятичные дроби. Мы же будем описывать обычную дробь.
	Для описания структуры используется ключевое слово struct и название структуры. Далее
в фигурных скобках описываются переменные, входящие в структуру. В нашем примере это будут
числитель и знаменатель. Также опишем переменную, которая будет хранить целую часть. У
этих переменных не гарантируются инициализационные значения, т.е. мы ничего не присваиваем
им изначально, это просто описание, которое говорит компилятору о том, что когда в коде
встретится инициализация нашей структуры, для её хранения понадобится вот столько памяти,
которую нужно разметить для хранения вот этих переменных.
	struct fraction {
		int integer;
		int divisible;
		int divisor;
	}
	Для сокращения записи опишем новый тип данных, назовём его ДРОБЬ. Это делается при
помощи ключевого слова typedef. Его синтаксис прост, пишем typedef название старого типа
данных название нового типа, т.е. как мы будем называть его в дальнейшем.
	typedef struct fraction Fraction;
	Доступ к переменным внутри структуры осуществляется привычным для высокоуровневых
языков способом - через точку. Создадим три переменных для хранения двух структур типа
дробь с которыми будем совершать операции, и одну для хранения результата. Инициализируем
переменные какими-нибудь значениями.
    Fraction f1, f2, result;
    f1.integer = -1;
    f1.divisible = 1;
    f1.divider = 5;
    f2.integer = -1;
    f2.divisible = 1;
    f2.divider = 5;
    result.divisible = 0;
    result.integer = 0;

	 Опишем функцию, которая будет выводить нашу дробь на экран. В эту функцию мы можем
передать нашу структуру по значению.

void frPrint(Fraction f) {
    if (f.divisible != 0)
        if (f.integer == 0) // по моему целая часть может быть равна только  1 - вся дробь
равна 0, что там печатать?
            printf("%d / %d", f.divisible, f.divider);
        else
           printf("%d %d/%d",f.integer,f.divisible,f.divider);
    else
        printf("%d", f.integer);
}

	Выглядит неплохо, для полноты картины не хватает только научиться выполнять с этими
дробями какие-нибудь действия. Для примера возьмём что-то простое, вроде умножения.
Передадим в эту функцию значения наших двух дробей и указатель на структуру, в которую
будем складывать результат вычислений. Чтобы не перепутать локальные структуры функции и
указатели на внешние структуры, доступ к полям внутри указателей на структуры получают не
при помощи точки, а при помощи вот такой стрелки.
void frMul(Fraction f1, Fraction f2, Fraction *result) {
    frDesinteger(&f1);
    frDesinteger(&f2);
    result->divisible = f1.divisible * f2.divisible;
    result->divider = f1.divider * f2.divider;
}

	Как очевидно, чтобы эта функция работала нормально для нашей структуры, нам нужно
будет создать функцию, которая будет переводить нашу дробь в простой вид, то есть лишать
целой части. Здесь нам на выручку снова придут указатели
void frDesinteger(Fraction *f) {
    f->divisible = f->divisible + (f->integer * f->divider);
    f->integer = 0;
}

Полученных знаний нам хватит для любых операций со структурами. До встречи на следующем
уроке, коллеги.


### Домашнее задание ###
/*
 * 2. Структуры.
 *    Описать структуру "прямоугольник", содержащую целочисленные значения длины, ширины,
 *    периметра и площади прямоугольника. Написать функцию, принимающую на вход указатель
 *    на структуру, подсчитывающую и записывающую площадь и периметр данного
 *    прямоугольника в структуру.
 */
typedef struct rectangle {
	int height;
	int width;
	int area;
	int perimeter;
} Rectangle;

void calcRectangle(Rectangle *r) {
	r->area = r->height * r->width;
	r->perimeter = (r->height + r->width) * 2;
}

void work_number_three() {
	// 2. Structures rectangle
	Rectangle rectangle;
	printf("Enter rect. height: ");
	scanf("%d", &rectangle.height);
	printf("Enter rect. width: ");
	scanf("%d", &rectangle.width);
	calcRectangle(&rectangle);
	printf("Your rectangle's area is %d, and perimeter length is %d\n", rectangle.area,
rectangle.perimeter);

}

/*
 * 4. *.
 *    Описать структуру "прямая линия" которая должна состоять из длины и двух внутренних
 *    структур типа
 *    "точка", в каждой из которых должны содержаться координаты по оси 'х' и по оси 'у'.
 *    Описать функцию принимающую на вход координаты двух точек, и возвращающую
 *    структуру "линия" с подсчитанной длиной.
 */
typedef struct point {
	int x;
	int y;
} Point;

typedef struct line {
	float length;
	Point p1;
	Point p2;
} Line;

Line initLine(int x1, int y1, int x2, int y2) {
	Line line;
	line.p1.x = x1;
	line.p1.y = y1;
	line.p2.x = x2;
	line.p2.y = y2;
	line.length = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
	return line;
}

void work_number_three() {
	// 4. Starred. line (points)
	Line l = initLine(5, 4, 8, 9);
	printf("Your line's point1 is: x = %d, y = %d", l.p1.x, l.p1.y);
	printf("Your line's point2 is: x = %d, y = %d", l.p2.x, l.p2.y);
	printf("Your line's length is: %f", l.length);
}
