Коллеги здравствуйте. За предыдущие занятия мы с вами познакомились почти со всеми
существующими в языке С типами данных, как примитивными, так и ссылочными. Довольно
подробно рассмотрели работу почти всех операторов языка. Пришло время поговорить о
взаимодействии программы с операционной системой, а именно - о чтении и записи в файловую
систему компьютера. Файловая система любого компьютера - это структура. Для языка С файл -
это тоже структура. Структура хранящая данные о положении курсора в файле, его название,
буферы, флажки и прочие свойства. Файлы делятся на два основных типа - текстовые и
бинарные. Мы рассмотрим работу с текстовыми.

Опишем переменную, хранящую указатель на нашу структуру. Вся основная работа будет
проходить через неё. Для того, чтобы присвоить этой переменной указатель на какой-то
реальный файл воспользуемся функцией fopen, которая возвращает указатель на адрес в
памяти. Функция принимает в качестве аргументов имя файла в двойных кавычках и режим его
открытия. Основных используемых режимов шесть - чтение, запись, добавление, двоичное
чтение, двоичную запись и двоичное добавление. Функции записи и добавления создают файл в
случае его отсутствия. А функция записи стирает файл, если он существует и не пустой. Итак
создадим текстовый файл с каким-то неожиданным названием вроде FILE.TXT, и скажем нашей
программе, что нужно будет его создать, если его не существует, перезаписать, если
существует, а дальше мы будем в него записывать данные. Имя файла в аргументе может быть
как полным, вроде C:\FILE.TXT тогда файл будет создан в корне диска C, так и
относительным, каким мы его указали сейчас. Это значит, что файл будет создан в той папке,
в которой запускается наша программа.
В случае, если файл не найден или по какой-то причине не создался, в переменную file
запишется нулевой указатель, поэтому перед тем, как начать работу с файлом, нужно
проверить, смогла-ли программа его открыть. if(file == NULL) return 1; Если всё хорошо,
можем записывать в файл данные. Для записи в файл есть несколько функций, мы воспользуемся
самой простой и очевидной fprintf() в неё в качестве первого аргумента обязательно нужно
передать указатель на файл, в который мы собираемся писать, а дальше можно использовать
как знакомый нам printf() со всеми его удобствами, заполнителями, экранированными
последовательностями и дополнительными аргументами. После того как мы закончили запись в
файл его необходимо закрыть вызвав функцию fclose();

Итак видим, в папке проекта появился файл.тхт и в нём записано наше содержимое. отлично.
Теперь давайте рассмотрим не менее животрепещущую тему, а именно - чтение из файла. Для
этого нужно его открыть в режиме чтения. Далее мы можем воспользоваться неожиданно похожей
функцией - fscanf() чтобы прочитать форматированные значения из файла. Но сколько данных
читать? как узнать, что достигнут конец файла? Для этого придумали функцию feof()
возвращающую ноль, если конец файла не достигнут, и единицу если достигнут. Опишем цикл,
который выведет в консоль все цифры из нашего файла while(!feof(file)) int i; fscanf(file,
”%d ”, &i); printf(“%d ”, i); Можем убедиться, что вывод в консоли и содержимое файла
совпадают. Это было не сложно. Не забудем закрыть файл.
На следующем уроке поговорим о распределении памяти. До скорой встречи!
