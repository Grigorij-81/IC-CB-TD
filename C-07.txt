Коллеги, здравствуйте. Вот и пришла пора поговорить о серьёзном  низкоуровневом
программировании. О том, от чего стараются оградить программистов языки высокого уровня.
Об указателях.

На этом уроке мы поговорим о том что такое указатели и как они  соотносятся
с остальными переменными, что такое передача аргумента по значению и по-ссылке.

Как мы помним из второго занятия все переменные и константы, используемые в программе
хранятся в оперативной памяти. У каждой переменной и константы в памяти есть свой
собственный адрес. Этот адрес выдаётся нашей программе операционной системой и мы можем
использовать его по-своему усмотрению.

В языке С есть возможность получить доступ к переменной не только по-имени, но и
по-адресу. Получение доступа к переменной по адресу называется разыменовыванием.
Адрес переменной может храниться в специальной переменной, которая называется указатель.

Для объявления указателя пишут тип переменной, адрес которой будет храниться в указателе,
знак звёздочки и имя указателя. Такому указателю можно присвоить значение адреса
существующей переменной, также как мы делали это раньше с другими типами данных. Для
наглядности выведем всю имеющуюся у нас на данный момент информацию на экран. Напомню, для
вывода адреса используется заполнитель %p:
	printf(“value of a: %d”, a);
	printf(“address of a: %p”, &a);
	printf(“value of p: %p”, p);
	printf(“address of p: %p”, &p);

Пока что ничего необычного, все эти операции мы выполняли на предыдущих уроках. Но
поскольку р это необычная переменная, а указатель, то мы можем получить не только её
значение, но и значение переменной, на которую она указывает:
printf(“p points at: %d”, *p);

Таким образом в указателе хранится ссылка на значение некоторой переменной. То есть
указатель - это примитивный ссылочный тип данных. Без указателей невозможно себе
представить создание классов, интерфейсов и всеми любимого объектно ориентированного
программирования.

Теперь, когда мы знаем об указателях, и умеем получать значения переменных на которые они
указывают, перед нами открываются невообразимые ранее перспективы. Мы можем писать функции
не создавая в них копии переменных, а передавать в них ссылки на уже существующие
переменные, тем самым экономя память, и ускоряя выполнение программы.

Например, не составит труда написать программу, которая бы меняла местами значения двух
переменных. Но написать функцию, которая бы проделывала тоже самое невозможно без
применения указателей. Почему? очень просто - внутри функции создаются свои собственные
переменные, значения которых меняются местами, и даже если мы вернём одну из них - как
быть со второй? А получить доступ ко второй переменной мы не можем, поскольку, помним, она
находится в области видимости функции. Такая передача аргументов называется передачей по
значению (мы берём значение некоторой переменной и передаём внутрь функции).

Как решить эту проблему? Передавать не значения переменных, а их адрес, тем самым сообщив
функции, что нужно не создавать новые копии переменных, а сделать что-то с уже
существующими, и, естественно указать адрес, с какими именно. Передача в качестве
аргумента адреса, и создание в теле функции нового указателя называется передачей по
ссылке. То есть функция будет ссылаться на переменные, на которые мы укажем.
Опишем функцию, меняющую местами значения переменных. Эта функция пригодится нам в
дальнейшем, например, при описании алгоритмов сортировок.

Применение такого подхода открывает перед нами широкие возможности, которые мы рассмотрим
на следующих уроках.

До новых встреч.


/*
 * Pointers.c
 *
 *  Created on: 11 июн. 2017 г.
 *      Author: ivanovcinnikov
 */
#include <stdio.h>

void swap_variables(int *x, int *y) {
	*x ^= *y;
	*y ^= *x;
	*x ^= *y;
}

int main (int argc, const char* argv[]) {
	int a = 50;
	printf("value of a is %d \n", a);
	printf("address of a is %p \n", &a);
	int * pointer;
	pointer = &a;
	printf("value of pointer is %p \n", pointer);
	printf("address of pointer is %p \n", &pointer);

	printf("variable 'pointer' points at: %d\n", *pointer);
	*pointer = 70;
	printf("value of a is %d \n", a);

	int first = 50;
	int second = 40;
	printf("first = %d, second = %d \n", first, second);
	swap_variables(&first, &second);
	printf("first = %d, second = %d \n", first, second);

	/*
	char a = 11;
	char b = 15;
	printf("a = %d, b = %d\n", a, b);
	a = a ^ b;				// a = 00000100
	// a = 11 (00001011)
	// b = 15 (00001111)
	// a ^ b = 00000100
	b = b ^ a;				// b = 00001011
	// b = 15 (00001111)
	// a = 4	  (00000100)
	// a ^ b = 00001011
	a = a ^ b;				// a = 00001111
	// a = 4  (00000100)
	// b = 11 (00001011)
	// a ^ b = 00001111
	printf("a = %d, b = %d\n", a, b);
	*/

	return 0;
}
