	Здравствуйте, коллеги. На предыдущем занятии мы начали говорить о массивах, давайте
продолжим. Это будет непросто, но мы поговорим о том что из себя представляет
идентификатор массива, чем чреват выход за пределы массива затронем тему арифметики
указателей и научимся передавать массивы в функции.

	Массив - это ссылочный тип данных. то есть в идентификаторе хранится ссылка на первый
байт первого элемента массива, дальнейший доступ к элементам осуществляется посредством
смещения относительно этого байта. Таким образом понятно, что запись вида arr[0] говорит
нам о том, что нужно взять адрес массива и  сместить указатель на 0 элементов того типа,
из которых состоит массив. Отсюда становится ясно, почему индексирование массивов
начинается с нуля. Относительно выхода за пределы массива надо сказать, что ни компилятор,
ни тем более операционная система никаких проверок не делают, поэтому это полностью
ложится на плечи программиста. Никаких сред виртуализации, никаких исключений, только
случайные данные, которые могут попасться нашей программе. Надо сказать, что всё таки
большая часть значений за пределами массива будет равна нулю, но всё равно лишний раз
экспериментировать не стоит.

	Как мы уже знаем в идентификаторе массива хранится ссылка на первый байт первого
элемента массива, т.е. идентификатор является по сути - указателем. Но существует
несколько отличий: указатель - это переменная, к ней применимы например операции
инкремента и декремента, чего конечно нельзя делать с идентификатором массива. Тем не
менее, с помощью идентификатора массива мы можем получить доступ к элементам массива не
только при помощи записи индекса в квадратных скобках, но и при помощи так называемой
арифметики указателей. Мы знаем, что массив - это единая область памяти, и значения в нём
располагаются подряд по очереди, значит, отсчитав от указателя на первый индекс нужное
количество байт - мы получим указатель на второй байт. Давайте для примера подсчитаем
среднее арифметическое всех чисел в массиве, с использованием арифметики указателей.
Заполним массив с клавиатуры.
	int i = 0;
	float result = 0;
	int average[ARRAY_LENGTH];
	while (i < ARRAY_LENGTH) {
		printf("Enter value %d:", i);
		scanf("%d", average + i);
		i++;
	}
	printf("Your array is: ");
	for (i = 0; i < ARRAY_LENGTH; i++)
		printf("%d ", average[i]);

	printf("\nAnd the average is: ");
	for (i = 0; i < ARRAY_LENGTH; i++)
		result += *(average + i);

	printf("%f \n", result/ARRAY_LENGTH);

	Как вы видите, некоторые подсчеты программа выполняет за нас - мы прибавляем к
указателю единицу, двойку, тройку и т.д, а программа понимает, что надо взять не следующий
по счёту байт, а следующий указатель, т.к. в данном примере мы используем массив в котором
хранятся значения типа int, а как вы помните int = 4 байт, то при увеличении указателя на
1 мы обратимся к области памяти находящейся на 4 байт дальше идентификатора, при
увеличении на 2 на 8 байт и т.д. Подсчитать среднее арифметическое не составит труда.
	Как мы уже говорили идентификатор массива - это необычный указатель. Обычный указатель
хранит в себе адрес какой-то другой переменной, и сам где-то хранится. Указатель на начало
массива хранит в себе адрес массива, то есть адрес его нулевого элемента, и сам этот
указатель находится в этом самом месте. На первый взгляд сложновато? Но пусть Вас это не
сбивает с толку, на деле всё не так жутко. На деле это означает, что при передаче массива
в функцию мы не должны использовать оператор взятия адреса, поскольку идентификатор
массива сам по себе является указателем на собственное начало. В только что написанной
нами программе оформим вывод массива на экран и поиск среднего арифметического в виде
функции. Очевидно, что нигде в массиве не содержится информация о том, какого он размера,
поэтому для корректной работы функции нам нужно сведения о размере массива передать в
функцию в качестве аргумента.
	void print Array(int* array, int length){
	int i;
	for (i = 0; i < length; i++)
		printf("%d ", array[i]);
	}

	float average(int* array, int length){
	float result;
	int i;
	for (i = 0; i < length; i++)
	result += *(array + i)

	return result;
	}

	Написанные функции принимают указатель на массив, это говорит о том что мы как бы
передаем массив в функцию и поэтому всё, что происходит в функции будет происходить с тем
массивом, который мы создали в основной части программы и который передали в функцию, в
отличие от примитивов никакого копирования значений не происходит.
	На следующем уроке познакомимся с двумерными массивами и массивами указателей. До
новых встреч коллеги.
