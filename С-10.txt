Коллеги, здравствуйте. Рад, вас приветствовать на десятом, юбилейном уроке курса основы языка С. На этом уроке нас ждёт продолжение разговора о массивах. 

Массив в языке С может иметь сколько угодно измерений. Самые распространённые - это двумерные и трёхмерные, которые легко себе представить в виде таблицы или куба. Итак массив это структура содержащая элементы. Двумерный массив - это массив из массивов, содержащих элементы. Трёхмерный - это массив из масиивов содержащих массивы. И так далее. В массиве могут находиться любые типы данных, мы, для удобства, будем рассматривать работу массивов с числами. Как работать с многомерными массивами мы рассмотрим на примере двумерного массива. Поставим для себя задачу - сформировать таблицу Пифагора (раньше такие на тетрадях в клетку печатали на обратной стороне). Таблица подразумевает наличие двух измерений - строк и колонок. Создадим двумерный массив, первое измерение которого будет отвечать за строки, и в каждом элементе этого массива будет содержаться массив отвечающий за столбцы. Таблица Пифагора представляет собой таблицу где строки и столбцы озаглавлены множителями а в ячейках таблицы находится их произведение.
Сразу напишем двойной цикл, который будет выводить на экран наши созданные двумерные массивы в удобном для нас виде.
	for(r = 0; r < rows; r++) {
		for(c = 0; c < cols; c++)
			printf("%2d ", table[r][c]);
		printf("\n");
	}
Заполнение таких массивов ничем не отличается от заполнения одномерных массивов. Мы можем заполнять их посредством конструкции в фигурных скобках, когда мы заранее знаем все значения, удобнейший способ для создания таблиц соответствия, или поэлементно, как мы сделаем это сейчас, пройдя по всем строкам массива циклом, и по всем столбцам массива вложенным циклом. Таким образом, запишем некоторые значения в каждую ячейку массива. Совершенно очевидно, что здесь внутри второго цикла может находиться не только математика, но и предложение пользователю ввести данные с клавиатуры. 
	for(r = 0; r < rows; r++)
		for(c = 0; c < cols; c++){
			//table[r][c] = (r + 1) * (c + 1);
			printf("Enter value (row %d, col %d)", r, c);
			scanf("%d", &table[r][c]);
		}

Как уже говорилось, массивы могут содержать данные любых типов, в том числе и указазатели. Именно это позволяет массиву хранить другие массивы, строки и прочие ссылочные типы данных. 
	char* stringArray[3] = {"Hello", "C", "World"};

	for(r = 0; r < 3; r++)
		printf("%s ", stringArray[r]);

Используя массивы указателей мы можем создать, например, массив строк, или двумерный массив, где каждый элемент не обязан быть того-же размера, что и остальные. Но строки и сложно составленные указатели это темы, которые очень сильно выходят за рамки Основ языка.

До встреч на следующих уроках, коллеги.
