Коллеги, здравствуйте. Рад вас приветствовать на 12м уроке Основы Языка С. На этом занятии мы поговорим о структурах данных в языке С. Структуры данных - это следующий уровень абстракции. Хоть язык и создавался в незапамятные времена, уже тогда программисты понимали, что примитивных типов данных недостаточно для комфортного программирования. И создали структуры данных. Структура данных - это такая сущность, которая объединяет в себе несколько примитивов. Например, создадим такую структуру, как простая дробь. В программировании существуют дробные числа и представлены они типами float и double. Но это десятичные дроби. Мы же будем описывать обычную дробь.

Для описания структуры используется ключевое слово struct и название структуры. Далее в фигурных скобках описываются переменные, входящие в структуру. В нашем примере это будут числитель и знаменатель. Также опишем переменную, которая будет хранить целую часть. У этих переменных не гарантируются инициализационные значения. Это просто описание, которое говорит компилятору о том, что когда в коде встретится инициализация сущности с таким названием, для её хранения понадобится вот столько памяти, которую нужно разметить для хранения вот этих переменных. Для сокращения записи опишем новый тип данных, назовём его ДРОБЬ.
Доступ к переменным внутри структуры осуществляется привычным для высокоуровневых языков способом - через точку. Создадим три переменных для хранения двух структур типа дробь с которыми будем совершать операции, и одну для хранения результата.
    Fraction f1, f2, result;
    f1.integer = -1;
    f1.divisible = 1;
    f1.divider = 5;
    f2.integer = -1;
    f2.divisible = 1;
    f2.divider = 5;
    result.divisible = 0;
    result.integer = 0; 
Инициализируем переменные какими-нибудь значениями. Опишем функцию, которая будет выводить нашу дробь на экран. В эту функцию мы можем передать нашу структуру по значению.
void frPrint(Fraction f) {
    if (f.divisible != 0)
        if (f.integer == 0)
            printf("%d / %d", f.divisible, f.divider);
        else
           printf("%d %d/%d",f.integer,f.divisible,f.divider);
    else
        printf("%d", f.integer);
}
Выглядит неплохо, для полноты картины не хватает только научиться выполнять с этими дробями какие-нибудь действия. Для примера возьмём что-то простое, вроде умножения. Передадим в эту функцию значения наших двух дробей и указатель на структуру, в которую будем складывать результат вычислений. 
void frMul(Fraction f1, Fraction f2, Fraction *result) {
    frDesinteger(&f1);
    frDesinteger(&f2);
    result->divisible = f1.divisible * f2.divisible;
    result->divider = f1.divider * f2.divider;
}
Чтобы не перепутать локальные структуры функции и указатели на внешние структуры, доступ к полям внутри указателей на структуры получают не при помощи точки, а при помощи вот такой стрелки. Как очевидно, чтобы эта функция работала нормально для нашей структуры, нам нужно будет создать функцию, которая будет переводить нашу дробь в простой вид, то есть лишать целой части. Здесь нам на выручку снова придут указатели
void frDesinteger(Fraction *f) {
    f->divisible = f->divisible + (f->integer * f->divider);
    f->integer = 0;
}

Полученных знаний нам хватит для любых операций со структурами. До встречи на следующем уроке, коллеги.

